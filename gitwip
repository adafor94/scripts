#!/bin/bash

set -e # Exit if any command fails

print_usage() {
    echo "Script for committing, interactive rebasing, squashing and amending of WIP-commits"
    echo
    echo "Usage: gitwip [ -m <msg> | -r | -s | -a | -h ] "
    echo
    echo "The default behaviour is to commit the files in the staging area"
    echo "with the message \"WIP-<number>\", based on the number of previous WIP-commits."
    echo "Commit, rebase and amend will temporarily disable any hooks."
    echo
    echo "     -m <msg>             Appends \": <msg>\" to the commit message"
    echo "     -r | --rebase        Starts an interactive rebase for all latest WIP-commits"
    echo "     -s | --squash        Squash all latest WIP-commits into the first non-WIP commit"
    echo "     -a | --amend         Just a normal amend, but without any hooks"
    echo
    echo "     -h | --help          This usage screen"
}

wip_commit() {
    # Construct commit message
    commit_msg="WIP-$line_count$@"
    # Disable hooks for this single command
    git -c core.hooksPath=/dev/null commit -m "$commit_msg"
}

wip_rebase() {
    if [ $line_count -gt 1 ]; then
        # Disable hooks for this single command
        git -c core.hooksPath=/dev/null rebase HEAD~$line_count --interactive
    else
        echo "No WIP-commits found!"
    fi
}

wip_squash() {
    if [ $line_count -gt 1 ]; then
        git reset --soft HEAD~$(($line_count-1))
        git commit --amend
    else
        echo "No WIP-commits found!"
    fi
}

wip_amend() {
    if [ $line_count -gt 1 ]; then
        git -c core.hooksPath=/dev/null commit --amend
    else
        echo "No WIP-commits found!"
    fi
}

# Get first 20 subject lines
subjects=$(git log --pretty=format:"%s" -n 20)

# Match to the first line that does not start with "WIP" (including first non-WIP line)
# Count the number of lines
line_count=$(awk '1;/^[^WIP]/{exit}' <(echo "$subjects") | wc -l )

if [ $# -gt 0 ]; then
    case $1 in
        -m)
            shift 1
            wip_commit ": $@"
            ;;
        --rebase | -r)
            wip_rebase
            ;;
        --squash | -s)
            wip_squash
            ;;
        --amend | -a)
            wip_amend
            ;;
        --help | -h)
            print_usage
            exit 0
            ;;
        *)
            print_usage
            exit 1
            ;;
    esac
else
    wip_commit ""
fi

exit 0
